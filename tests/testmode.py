import torch
import cv2
from pathlib import Path
from ultralytics import YOLO # Importar a classe YOLO do ultralytics

# Caminho base do seu projeto (ajuste se necess√°rio)
# Isso ajuda a construir caminhos relativos de forma mais robusta
PROJECT_ROOT = Path("C:/AI_Totem/AI-Totem")

# 1. Carregue seu modelo YOLO
# Recomendado: Usar o modelo 'best.pt' treinado com suas frutas
# Substitua pelo caminho correto do seu best.pt (o que voc√™ treinou)
MODEL_PATH = PROJECT_ROOT / "runs" / "detect" / "fruits_yolo3" / "weights" / "best.pt"

# Ou, se quiser testar o yolov8n.pt (modelo pr√©-treinado geral):
# MODEL_PATH = PROJECT_ROOT / "yolov8n.pt"

try:
    modelo = YOLO(MODEL_PATH)
    print(f"Modelo carregado com sucesso de: {MODEL_PATH}")
except Exception as e:
    print(f"Erro ao carregar o modelo de {MODEL_PATH}: {e}")
    exit() # Sai do script se o modelo n√£o puder ser carregado

# 2. Configure limites de confian√ßa
modelo.conf = 0.25 # Threshold m√≠nimo para considerar uma detec√ß√£o v√°lida (0.25 √© um bom valor inicial)
modelo.iou = 0.7   # Threshold de Intersection Over Union (para agrupar caixas - NMS)

# 3. Fun√ß√£o para testar com uma imagem
def testar_imagem(caminho_imagem):
    # Converte o caminho para um objeto Path para melhor compatibilidade
    caminho_imagem_path = Path(caminho_imagem)

    # Carregue a imagem usando OpenCV
    img = cv2.imread(str(caminho_imagem_path)) # str() necess√°rio para cv2.imread

    if img is None:
        print(f"Erro: N√£o foi poss√≠vel carregar a imagem em {caminho_imagem_path}")
        return

    print(f"\n‚úÖ Imagem carregada: {caminho_imagem_path}")

    # Execute a detec√ß√£o
    # O m√©todo predict do YOLOv8 j√° cuida da convers√£o de cores e outros pr√©-processamentos
    resultados = modelo.predict(source=img, save=False, conf=modelo.conf, iou=modelo.iou) # save=False para n√£o salvar automaticamente aqui

    # Iterar sobre os resultados (se houver m√∫ltiplas imagens no 'source')
    for r in resultados:
        # Mostre os resultados no console (formato Pandas DataFrame)
        # O YOLOv8 retorna os resultados como objetos 'Results' que cont√™m 'boxes'
        # que podem ser convertidos para pandas.
        if r.boxes: # Verifica se h√° detec√ß√µes
            detec√ß√µes_df = r.boxes.data.cpu().numpy() # Pega os dados dos boxes
            print("\nüìä Detec√ß√µes (xmin, ymin, xmax, ymax, confidence, class_id):")
            # Para uma visualiza√ß√£o mais amig√°vel, voc√™ pode converter para DataFrame
            # e adicionar os nomes das classes se o modelo as tiver.
            # No entanto, a forma mais simples de ver √© o pr√≥prio plot.
            print(detec√ß√µes_df) # Mostra o array numpy

            # Plotar os resultados na imagem (desenha as bounding boxes)
            im_com_bboxes = r.plot() # Retorna a imagem com as caixas desenhadas

            # Mostre a imagem com detec√ß√µes usando OpenCV
            cv2.imshow("Detec√ß√µes YOLOv8", im_com_bboxes)
            cv2.waitKey(0) # Aguarda uma tecla ser pressionada
            cv2.destroyAllWindows() # Fecha a janela

            # Salve a imagem com detec√ß√µes (opcional)
            output_dir = PROJECT_ROOT / "teste_output"
            output_dir.mkdir(parents=True, exist_ok=True) # Cria a pasta se n√£o existir
            output_path = output_dir / f"deteccao_{caminho_imagem_path.name}"
            cv2.imwrite(str(output_path), im_com_bboxes)
            print(f"üñºÔ∏è Imagem com detec√ß√µes salva em: {output_path}")

        else:
            print("‚ùå Nenhuma detec√ß√£o encontrada para esta imagem.")
            # Se n√£o houver detec√ß√µes, ainda podemos mostrar a imagem original
            cv2.imshow("Detec√ß√µes YOLOv8", img)
            cv2.waitKey(0)
            cv2.destroyAllWindows()


# 4. Teste!
if __name__ == "__main__":
    # Substitua pelo caminho da SUA imagem de teste usando o PROJECT_ROOT
    imagem_teste = PROJECT_ROOT / "tests" / "fotostestes" / "uva.jpg"
    
    testar_imagem(imagem_teste)